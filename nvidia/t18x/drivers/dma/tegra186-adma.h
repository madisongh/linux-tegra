/*
 * tegra186_adma.h - Tegra ADMA driver.
 *
 * Author: Mohan Kumar <mkumard@nvidia.com>
 *
 * Copyright (C) 2015-2016, NVIDIA CORPORATION. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

#ifndef __MACH_TEGRA_ADMA_H
#define __MACH_TEGRA_ADMA_H

/* Register offsets from ADMA*_BASE */
#define ADMA_GLOBAL_CMD						0x00
#define ADMA_GLOBAL_SOFT_RESET					0x04
#define ADMA_GLOBAL_CG						0x08
#define ADMA_GLOBAL_STATUS					0x0c
#define ADMA_GLOBAL_CTRL					0x20
#define ADMA_GLOBAL_REGION_ID_LOCK				0x2c
#define ADMA_GLOBAL_PAGE1_CHGRP					0x30
#define ADMA_GLOBAL_PAGE2_CHGRP					0x34
#define ADMA_GLOBAL_PAGE3_CHGRP					0x38
#define ADMA_GLOBAL_PAGE4_CHGRP					0x3c
#define ADMA_GLOBAL_PAGE1_ARAM_CFG				0x50
#define ADMA_GLOBAL_PAGE2_ARAM_CFG				0x54
#define ADMA_GLOBAL_PAGE3_ARAM_CFG				0x58
#define ADMA_GLOBAL_PAGE4_ARAM_CFG				0x5c
#define ADMA_GLOBAL_PAGE1_RX_REQUESTORS				0x70
#define ADMA_GLOBAL_PAGE2_RX_REQUESTORS				0x74
#define ADMA_GLOBAL_PAGE3_RX_REQUESTORS				0x78
#define ADMA_GLOBAL_PAGE4_RX_REQUESTORS				0x7c
#define ADMA_GLOBAL_PAGE1_TX_REQUESTORS				0x84
#define ADMA_GLOBAL_PAGE2_TX_REQUESTORS				0x88
#define ADMA_GLOBAL_PAGE3_TX_REQUESTORS				0x8c
#define ADMA_GLOBAL_PAGE4_TX_REQUESTORS				0x90
#define ADMA_GLOBAL_CH1_REGION_ID				0x98
#define ADMA_GLOBAL_CH2_REGION_ID				0x9c
#define ADMA_GLOBAL_CH3_REGION_ID				0xa0
#define ADMA_GLOBAL_CH4_REGION_ID				0xa4
#define ADMA_GLOBAL_CH5_REGION_ID				0xa8
#define ADMA_GLOBAL_CH6_REGION_ID				0xac
#define ADMA_GLOBAL_CH7_REGION_ID				0xb0
#define ADMA_GLOBAL_CH8_REGION_ID				0xb4
#define ADMA_GLOBAL_CH9_REGION_ID				0xb8
#define ADMA_GLOBAL_CH10_REGION_ID				0xbc
#define ADMA_GLOBAL_CH11_REGION_ID				0xc0
#define ADMA_GLOBAL_CH12_REGION_ID				0xc4
#define ADMA_GLOBAL_CH13_REGION_ID				0xc8
#define ADMA_GLOBAL_CH14_REGION_ID				0xcc
#define ADMA_GLOBAL_CH15_REGION_ID				0xd0
#define ADMA_GLOBAL_CH16_REGION_ID				0xd4
#define ADMA_GLOBAL_CH17_REGION_ID				0xd8
#define ADMA_GLOBAL_CH18_REGION_ID				0xdc
#define ADMA_GLOBAL_CH19_REGION_ID				0xe0
#define ADMA_GLOBAL_CH20_REGION_ID				0xe4
#define ADMA_GLOBAL_CH21_REGION_ID				0xe8
#define ADMA_GLOBAL_CH22_REGION_ID				0xec
#define ADMA_GLOBAL_CH23_REGION_ID				0xf0
#define ADMA_GLOBAL_CH24_REGION_ID				0xf4
#define ADMA_GLOBAL_CH25_REGION_ID				0xf8
#define ADMA_GLOBAL_CH26_REGION_ID				0xfc
#define ADMA_GLOBAL_CH27_REGION_ID				0x100
#define ADMA_GLOBAL_CH28_REGION_ID				0x104
#define ADMA_GLOBAL_CH29_REGION_ID				0x108
#define ADMA_GLOBAL_CH30_REGION_ID				0x10c
#define ADMA_GLOBAL_CH31_REGION_ID				0x110
#define ADMA_GLOBAL_CH32_REGION_ID				0x114
#define ADMA_GLOBAL_CYA_0					0x118
#define ADMA_GLOBAL_CYA_1					0x11c

#define ADMA_CH_CMD						0x00
#define ADMA_CH_SOFT_RESET					0x04
#define ADMA_CH_STATUS						0x0c
#define ADMA_CH_INT_STATUS					0x10
#define ADMA_CH_INT_SET						0x18
#define ADMA_CH_INT_CLEAR					0x1c
#define ADMA_CH_CTRL						0x24
#define ADMA_CH_CONFIG						0x28
#define ADMA_CH_AHUB_FIFO_CTRL					0x2c
#define ADMA_CH_TC_STATUS					0x30
#define ADMA_CH_LOWER_SOURCE_ADDR				0x34
#define ADMA_CH_LOWER_TARGET_ADDR				0x3c
#define ADMA_CH_TC						0x44
#define ADMA_CH_LOWER_DESC_ADDR					0x48
#define ADMA_CH_TRANSFER_STATUS					0x54
#define ADMA_CH_TIMESTAMP_ADDR					0x58
#define ADMA_CH_TIMESTAMP_STATUS				0x5c
#define ADMA_CH_CYA						0x64
#define ADMA_CH_DBG0						0x6c
#define ADMA_CH_DBG1						0x70
#define ADMA_CH_DBG2						0x74
#define ADMA_CH_TRANSFER_TYPE					0x78

#define ADMA_GLOBAL_INT_STATUS					0x4020
#define ADMA_GLOBAL_INT_MASK					0x4024
#define ADMA_GLOBAL_INT_SET					0x4028
#define ADMA_GLOBAL_INT_CLEAR					0x402c
#define ADMA_GLOBAL_CH_INT_STATUS				0x4040
#define ADMA_GLOBAL_CH_ENABLE_STATUS				0x4048
#define ADMA_GLOBAL_TX_REQUESTORS				0x4050
#define ADMA_GLOBAL_RX_REQUESTORS				0x4058
#define ADMA_GLOBAL_TRIGGERS					0x4060
#define ADMA_GLOBAL_TRANSFER_ERROR_LOG				0x4068

#define ADMA_AST_CONTROL					0x000
#define ADMA_AST_RGN_SLAVE_BASE_LO				0x100
#define ADMA_AST_RGN_SLAVE_BASE_HI				0x104
#define ADMA_AST_RGN_MASK_BASE_LO				0x108
#define ADMA_AST_RGN_MASK_BASE_HI				0x10c
#define ADMA_AST_RGN_MASTER_BASE_LO				0x110
#define ADMA_AST_RGN_MASTER_BASE_HI				0x114
#define ADMA_AST_RGN_CONTOL					0x118

#define AST_PAGE_MASK						(~0xFFF)
#define AST_LO_SHIFT						32
#define AST_LO_MASK						0xFFFFFFFF
#define AST_PHY_SID_IDX						0
#define AST_APE_SID_IDX						1
#define AST_NS							(1 << 3)
#define AST_VMINDEX(IDX)					(IDX << 15)
#define AST_RGN_ENABLE						(1 << 0)
#define AST_RGN_OFFSET						0x20

#define ADMA_CH_SIZE						0x100
#define ADMA_PAGE_SIZE						0x10000
#define ADMA_CH_BASE_OFFSET					0x10000

/* Fields in ADMA_CH_CTRL  */
#define ADMA_CH_CTRL_TX_REQUEST_SELECT_SHIFT			27
#define ADMA_CH_CTRL_TX_REQUEST_SELECT_MASK	\
	(31 << ADMA_CH_CTRL_TX_REQUEST_SELECT_SHIFT)
#define ADMA_CH_CTRL_RX_REQUEST_SELECT_SHIFT			22
#define ADMA_CH_CTRL_RX_REQUEST_SELECT_MASK	\
	(31 << ADMA_CH_CTRL_RX_REQUEST_SELECT_SHIFT)
#define ADMA_CH_CTRL_TRIGGER_SELECT_SHIFT			16
#define ADMA_CH_CTRL_TRANSFER_DIRECTION_SHIFT			12
#define ADMA_CH_CTRL_TRANSFER_DIRECTION_MASK	\
	(15 << ADMA_CH_CTRL_TRANSFER_DIRECTION_SHIFT)
#define ADMA_CH_CTRL_TRANSFER_MODE_SHIFT			8
#define ADMA_CH_CTRL_TRANSFER_MODE_MASK		\
	(7 << ADMA_CH_CTRL_TRANSFER_MODE_SHIFT)
#define ADMA_CH_CTRL_TIMESTAMP_CAPTURE_ENABLE_SHIFT		4
#define ADMA_CH_CTRL_TIMESTAMP_CAPTURE_ENABLE_MASK	\
	(3 << ADMA_CH_CTRL_TIMESTAMP_CAPTURE_ENABLE_SHIFT)
#define ADMA_CH_CTRL_FLOWCTRL_TYPE_SHIFT			3
#define ADMA_CH_CTRL_TRIGGER_ENABLE_SHIFT			2
#define ADMA_CH_CTRL_FLOWCTRL_ENABLE_SHIFT			1
#define ADMA_CH_CTRL_TRANSFER_PAUSE_SHIFT			0
#define ADMA_CH_CTRL_TRANSFER_PAUSE_MASK	\
	(1 << ADMA_CH_CTRL_TRANSFER_PAUSE_SHIFT)

#define ADMA_CH_CTRL_TRANSFER_PAUSE					BIT(0)
#define ADMA_CH_CTRL_FLOWCTRL_ENABLE				BIT(1)

/* Fields in ADMA_CH_CONFIG  */
#define ADMA_CH_CONFIG_SOURCE_MEMORY_BUFFER_SHIFT		28
#define ADMA_CH_CONFIG_SOURCE_MEMORY_BUFFER_MASK	\
	(7 << ADMA_CH_CONFIG_SOURCE_MEMORY_BUFFER_SHIFT)
#define ADMA_CH_CONFIG_TARGET_MEMORY_BUFFER_SHIFT		24
#define ADMA_CH_CONFIG_TARGET_MEMORY_BUFFER_MASK	\
	(7 << ADMA_CH_CONFIG_TARGET_MEMORY_BUFFER_SHIFT)
#define ADMA_CH_CONFIG_BURST_SIZE_SHIFT				20
#define ADMA_CH_CONFIG_BURST_SIZE_MASK		\
	(15 << ADMA_CH_CONFIG_BURST_SIZE_SHIFT)
#define ADMA_CH_CONFIG_SOURCE_ADDR_WRAP_SHIFT			16
#define ADMA_CH_CONFIG_TARGET_ADDR_WRAP_SHIFT			12
#define ADMA_CH_CONFIG_OUTSTANDING_REQUESTS_SHIFT		4
#define ADMA_CH_CONFIG_WEIGHT_FOR_WRR_SHIFT			0

#define ADMA_CH_CONFIG_MAX_MEM_BUFFERS				8

/* Fields in ADMA_CH_AHUB_FIFO_CTRL  */
#define ADMA_CH_AHUB_FIFO_CTRL_FETCHING_POLICY_SHIFT		31
#define ADMA_CH_AHUB_FIFO_CTRL_OVERFLOW_THRESHOLD_SHIFT		24
#define ADMA_CH_AHUB_FIFO_CTRL_STARVATION_THRESHOLD_SHIFT	16
#define ADMA_CH_AHUB_FIFO_CTRL_TX_FIFO_SIZE_SHIFT		8
#define ADMA_CH_AHUB_FIFO_CTRL_TX_FIFO_SIZE_MASK	\
	(63 << ADMA_CH_AHUB_FIFO_CTRL_TX_FIFO_SIZE_SHIFT)
#define ADMA_CH_AHUB_FIFO_CTRL_RX_FIFO_SIZE_SHIFT		0
#define ADMA_CH_AHUB_FIFO_CTRL_RX_FIFO_SIZE_MASK	\
	(63 << ADMA_CH_AHUB_FIFO_CTRL_RX_FIFO_SIZE_SHIFT)

#define ADMA_CH_INT_TD_STATUS					BIT(0)

/* Fields in ADMA_GLOBAL_CTRL  */
#define ADMA_GLOBAL_CTRL_TRANSFER_PAUSE				BIT(0)
#define ADMA_GLOBAL_CTRL_TRANSFER_PAUSE_SHIFT			0
#define ADMA_GLOBAL_CTRL_OUTSTANDING_MEM_READS_SHIFT		8
#define ADMA_GLOBAL_CTRL_OUTSTANDING_MEM_WRITES_SHIFT		16
#define ADMA_GLOBAL_CTRL_TRANSFER_PAUSE_MASK	\
	(1 << ADMA_GLOBAL_CTRL_TRANSFER_PAUSE_SHIFT)
#define ADMA_GLOBAL_CTRL_OUTSTANDING_MEM_READS_MASK	\
	(15 << ADMA_GLOBAL_CTRL_OUTSTANDING_MEM_READS_SHIFT)
#define ADMA_GLOBAL_CTRL_OUTSTANDING_MEM_WRITES_MASK	\
	(15 << ADMA_GLOBAL_CTRL_OUTSTANDING_MEM_WRITES_SHIFT)

/* Maximum adma transfer 1GB size */
#define ADMA_MAX_TRANSFER_SIZE					0x40000000
#define ADMA_NAME_SIZE						16

enum tegra_adma_burst_size {
	WORD_1 = 0,
	WORDS_2 = 1,
	WORDS_3 = 2,
	WORDS_4 = 3,
	WORDS_5 = 4,
	WORDS_6 = 5,
	WORDS_7 = 6,
	WORDS_8 = 7,
	WORDS_9 = 8,
	WORDS_10 = 9,
	WORDS_11 = 10,
	WORDS_12 = 11,
	WORDS_13 = 12,
	WORDS_14 = 13,
	WORDS_15 = 14,
	WORDS_16 = 15,
};

enum {
	GLOBAL_REG,
	ADDR1, /* PAGE0 */
	ADDR2,
	ADDR3,
	ADDR4,
	ADAST_REG,
#if defined(CONFIG_TEGRA_ADMA_WAR)
	SHRD_SMP_REG,
#endif
	ADMA_MAX_ADDR
};

#define CH_REG_SIZE     0x100
#define TEGRA_ADMA_BURST_COMPLETE_TIME	20

/* Fields in ADMA_CH_TRANSFER_STATUS */
#define ADMA_CH_TRANSFER_DONE_COUNT_SHIFT				0
#define ADMA_CH_TRANSFER_DONE_COUNT_MASK	\
	(0xFFFF << ADMA_CH_TRANSFER_DONE_COUNT_SHIFT)

#define TEGRA_ADMA_STATUS_COUNT_MASK		0xFFFC
/* Fields in ADMA_CH_STATUS */
#define ADMA_CH_STATUS_CURRENT_SOURCE_MEMORY_BUFFER_SHIFT	20
#define ADMA_CH_STATUS_CURRENT_TARGET_MEMORY_BUFFER_SHIFT	16
#define ADMA_CH_STATUS_OUTSTANDING_TRANSFERS_SHIFT		2
#define ADMA_CH_STATUS_TRANSFER_PAUSED_SHIFT			1
#define ADMA_CH_STATUS_TRANSFER_PAUSED				BIT(1)
#define ADMA_CH_STATUS_TRANSFER_ENABLED				BIT(0)

#define MAX_ADMAIF_WITH_DMA_FIFO_SIZE_3				4

#define ADMA_GLOBAL_CG_DISABLE		0x00
#define ADMA_GLOBAL_CG_ENABLE		0x07
/* HSP SS registers for ADMA WAR */
#define HSP_SHRD_SEM_0_SHRD_SMP_STA		0x00
#define HSP_SHRD_SEM_0_SHRD_SMP_STA_SET		0x04
#define HSP_SHRD_SEM_0_SHRD_SMP_STA_CLR		0x08
#define SHRD_SMP_STA				HSP_SHRD_SEM_0_SHRD_SMP_STA
#define SHRD_SMP_STA_SET			HSP_SHRD_SEM_0_SHRD_SMP_STA_SET
#define SHRD_SMP_STA_CLR			HSP_SHRD_SEM_0_SHRD_SMP_STA_CLR
/* Make sure ADSP using 2nd SMP bit */
#define ADMA_SHRD_SMP_CPU		0x1
#define ADMA_SHRD_SMP_ADSP		0x2
#define ADMA_SHRD_SMP_BITS		(ADMA_SHRD_SMP_CPU | ADMA_SHRD_SMP_ADSP)
#define ADMA_SHRD_SEM_WAIT_COUNT	50

enum tegra_adma_fetching_policy {
	BURST_BASED = 0,
	THRESHOLD_BASED = 1,
};


enum tegra_adma_mode {
	ADMA_MODE_ONESHOT = 1,
	ADMA_MODE_CONTINUOUS = 2,
	ADMA_MODE_LINKED_LIST = 4,
};

enum tegra_adma_transfer_direction {
	MEMORY_TO_MEMORY = 1,
	AHUB_TO_MEMORY = 2,
	MEMORY_TO_AHUB = 4,
	AHUB_TO_AHUB = 8,
};

int tegra_adma_init(struct platform_device *pdev, void __iomem *adma_addr[]);

#endif
